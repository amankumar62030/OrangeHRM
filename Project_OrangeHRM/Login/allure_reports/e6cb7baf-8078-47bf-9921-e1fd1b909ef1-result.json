{"name": "test_valid_login", "status": "failed", "statusDetails": {"message": "Failed: Login Failed", "trace": "self = <test_Login8.TestClass object at 0x0000016813A8DE50>\n\n    def test_valid_login(self):\n        driver = webdriver.Chrome()\n        driver.implicitly_wait(10)\n        driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n        # print(driver)\n        # Enter username\n        driver.find_element(By.NAME, \"username\").send_keys(\"Admin123\")\n        # Enter password\n        driver.find_element(By.NAME, \"password\").send_keys(\"\")\n        # Click login button\n        driver.find_element(By.CLASS_NAME, \"oxd-button\").click()\n    \n        # Validate login\n        try:\n>           dashboard_element = driver.find_element(By.LINK_TEXT, \"Dashboard\")\n\ntest_Login8.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Users\\hi\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nC:\\Users\\hi\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000016813F20160>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF66A162979]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC7281E8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFC72D7FBCC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"link text\",\"selector\":\"Dashboard\"}\nE         (Session info: chrome=131.0.6778.266); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF66A4D80D5+2992373]\nE       \t(No symbol) [0x00007FF66A16BFD0]\nE       \t(No symbol) [0x00007FF66A00590A]\nE       \t(No symbol) [0x00007FF66A05926E]\nE       \t(No symbol) [0x00007FF66A05955C]\nE       \t(No symbol) [0x00007FF66A0A27D7]\nE       \t(No symbol) [0x00007FF66A07F3AF]\nE       \t(No symbol) [0x00007FF66A09F584]\nE       \t(No symbol) [0x00007FF66A07F113]\nE       \t(No symbol) [0x00007FF66A04A918]\nE       \t(No symbol) [0x00007FF66A04BA81]\nE       \tGetHandleVerifier [0x00007FF66A536A2D+3379789]\nE       \tGetHandleVerifier [0x00007FF66A54C32D+3468109]\nE       \tGetHandleVerifier [0x00007FF66A540043+3418211]\nE       \tGetHandleVerifier [0x00007FF66A2CC78B+847787]\nE       \t(No symbol) [0x00007FF66A17757F]\nE       \t(No symbol) [0x00007FF66A172FC4]\nE       \t(No symbol) [0x00007FF66A17315D]\nE       \t(No symbol) [0x00007FF66A162979]\nE       \tBaseThreadInitThunk [0x00007FFC7281E8D7+23]\nE       \tRtlUserThreadStart [0x00007FFC72D7FBCC+44]\n\nC:\\Users\\hi\\AppData\\Roaming\\Python\\Python313\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_Login8.TestClass object at 0x0000016813A8DE50>\n\n    def test_valid_login(self):\n        driver = webdriver.Chrome()\n        driver.implicitly_wait(10)\n        driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n        # print(driver)\n        # Enter username\n        driver.find_element(By.NAME, \"username\").send_keys(\"Admin123\")\n        # Enter password\n        driver.find_element(By.NAME, \"password\").send_keys(\"\")\n        # Click login button\n        driver.find_element(By.CLASS_NAME, \"oxd-button\").click()\n    \n        # Validate login\n        try:\n            dashboard_element = driver.find_element(By.LINK_TEXT, \"Dashboard\")\n            assert dashboard_element.is_displayed()\n            print(\"Login Successful\")\n        except NoSuchElementException as e:\n            # Capture and attach screenshot on failure\n            with allure.step(\"Capture screenshot on failure\"):\n                screenshot_path = os.path.join(os.getcwd(), \"login_failure_screenshot.png\")\n                driver.save_screenshot(screenshot_path)\n                allure.attach.file(\n                    screenshot_path,\n                    name=\"Login_Failure_Screenshot\",\n                    attachment_type=allure.attachment_type.PNG\n                )\n>           pytest.fail(\"Login Failed\")\nE           Failed: Login Failed\n\ntest_Login8.py:39: Failed"}, "steps": [{"name": "Capture screenshot on failure", "status": "passed", "attachments": [{"name": "Login_Failure_Screenshot", "source": "5d86cf8d-4f48-4176-9fc1-47250a5c11b9-attachment.png", "type": "image/png"}], "start": 1737462565521, "stop": 1737462565685}], "start": 1737462547124, "stop": 1737462567843, "uuid": "8eeb028a-954b-4032-a753-ebc7980556d1", "historyId": "ee42d513e4b1e0e74aee50baace5019b", "testCaseId": "ee42d513e4b1e0e74aee50baace5019b", "fullName": "test_Login8.TestClass#test_valid_login", "labels": [{"name": "suite", "value": "test_Login8"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "AMAN-KUMAR"}, {"name": "thread", "value": "28552-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Login8"}]}